var assert = require('assert');

/*
 * Author: Ryan Williams <rwilliams@ultraserve.com.au> +61428115954
 * 
 * This script places an order on amwaylive.com using Cash on Delivery and then cancels that order.
 */

const productId = '0024';
const timeout = 10000;

$browser.addHeader('User-Agent', 'Mozilla/5.0 (compatible; MSIE 10.6; Windows NT 6.1; Trident/5.0; InfoPath.2; SLCC1; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729; .NET CLR 2.0.50727) 3gpp-gba UNTRUSTED/1.0')
  .then($browser.manage().deleteAllCookies())
  .then($browser.manage().window().maximize())
  .then($browser.manage().window().setSize(1920, 3000))

  .then($browser.get('https://www.amwaylive.com/'))

  .then(() => {
    console.log('Login');
    return waitForUrl('https://www.amwaylive.com/')
      .then(waitForOverlay())
      .then($browser.findElement($driver.By.css('.nav-links-container .js-my-account-menu')).click())
      .then(() => {
        return $browser.waitForAndFindElement($driver.By.css('button.login-form__submit'), timeout)
          .then(button => {
            return button.click();
          });
      })
      .then(waitForUrl('https://idp.amwaylive.com/auth/oauth2/default/v1/authorize'))
      .then($browser.findElement($driver.By.id('j_username')).sendKeys($secure.AMWAYLIVE_USERNAME))
      .then($browser.findElement($driver.By.id('j_password')).sendKeys($secure.AMWAYLIVE_PASSWORD))
      .then($browser.findElement($driver.By.css('button.loginformsumit, button.loginformsubmit')).click()) // Note deliberate incorrect spelling of 'submit'
      .then(waitForUrl('https://www.amwaylive.com/'))
      .then(waitForOverlay())
  }, (err) => {
    console.log('Login Failed');
    throw err;
  })

  .then(() => {
    console.log('Search for Product');
    return $browser.findElement($driver.By.id('js-site-search-input'))
      .then((searchBox) => {
        return searchBox.sendKeys(productId)
          .then(searchBox.submit());
      })
      .then(waitForUrl('https://www.amwaylive.com/search/'))
      .then(waitForOverlay())
  }, (err) => {
    console.log('Search for Product Failed');
    throw err;
  })

  .then(() => {
    console.log('Search Results');
    // Find the correct product in the search results, matching on productId (発注番号)
    return $browser.findElements($driver.By.css('p.product-list__item-number'))
      .then(items => {
        let desiredItem = null;
        let promises = [];
        for (let i = 0; i < items.length; i++) {
          promises.push(items[i].getText().then(text => {
            const regex = new RegExp('\\b' + productId + '\\s*$');
            if (text.match(regex))
              desiredItem = items[i];
          }))
        }
        return $driver.promise.all(promises).then(() => {
          if (desiredItem == null)
            throw new Error('ProductNotFound: ' + productId);

          return desiredItem;
        })
      });  
  }, (err) => {
    console.log('Search Results Failed')
    throw err;
  })

  .then(item => {
    console.log('Add to Cart');
    return item.findElement($driver.By.xpath('//ancestor::div[contains(concat(" ", normalize-space(@class), " "), " product-list__item ")]'))
      .then(productListItem => {
        productListItem.findElement($driver.By.css('.product-stock .product-availability .not-available')).then(() => {
          throw new Error('Product: ' + productId + ' is out of stock.');
        }, (err) => {
          // Do Nothing
        });

        return productListItem.findElement($driver.By.css('form.add_to_cart_form button.add-to-cart')).click();
      })
      .then(waitForOverlay())
      .then(() => {
        return $browser.waitForAndFindElement($driver.By.css('div#modal-popup-container'), timeout)
          .then(dialog => {
            return waitForOverlay()
              .then(() => {
                return dialog.findElement($driver.By.css('div.qty-selector span.red'))
                  .then(span => {
                    return span.getText()
                      .then(text => {
                        if (text.trim() != '1')
                          throw new Error('Item was not added to cart');
                      });
                  });
              });
          });
      });
  }, (err) => {
    console.log('Add to Cart Failed');
    throw err;
  })
  
  .then(() => {
    console.log('View Cart');
    return $browser.findElement($driver.By.css('div#modal-popup-container a.btn.pop-add-to-cart')).click()
      .then(waitForUrl('https://www.amwaylive.com/cart'))
      .then(waitForOverlay)
  }, (err) => {
    console.log('View Cart Failed');
    throw err;
  })

  .then(() => {
    console.log('Checkout');
    return $browser.findElement($driver.By.css('a.continueCheckout')).click()
      .then(waitForUrl('https://www.amwaylive.com/checkout/multi/delivery-address/add'))
      .then(waitForOverlay())
      .then($browser.findElement($driver.By.css('button.proceedToPayment')).click())

      .then(waitForUrl('https://www.amwaylive.com/checkout/multi/payment-method/add'))
      .then(waitForOverlay())
      .then($browser.findElement($driver.By.css('input[data-paymentmode=cod]')).click())
      .then(waitForOverlay())
      .then($browser.findElement($driver.By.css('button.js-confirm-Order-Details')).click())

      .then(waitForUrl('https://www.amwaylive.com/checkout/multi/summary/view'))
      .then(waitForOverlay())
      .then($browser.findElement($driver.By.css('button#summarypage-submitplaceOrder')).click())

      .then(waitForUrl('https://www.amwaylive.com/checkout/orderConfirmation/'))
      .then(waitForOverlay())
      .then(() => {
        return $browser.findElement($driver.By.css('div#shippingdiv > p')).getText()
          .then(text => { 
            let orderNumber = text.replace(/[^\d]/g, '');
            console.log('Order Number: ' + orderNumber);
            return orderNumber;
          })
      });
  }, (err) => {
    console.log('Checkout Failed');
    throw err;
  })

  .then(orderNumber => {
    console.log('View Orders')
    if (orderNumber == null)
      throw new Error('orderNumber is null');

    return $browser.get('https://www.amwaylive.com/my-account/orders')
      .then(waitForOverlay())
      .then($browser.findElement($driver.By.xpath('//tr[contains(concat(" ", normalize-space(@class), " "), " order-history-table-item ")]/td/span/span[contains(concat(" ", normalize-space(text()), " "), " ' + orderNumber + ' ")]')).click())
      .then(waitForOverlay());
  }, (err) => {
    console.log('View Orders Failed');
    throw err;
  })

  .then(() => {
    console.log('Cancel Order');

    return $browser.findElement($driver.By.css('tr.order-details-block div.orderCancelBtn')).click()
      .then($browser.waitForAndFindElement($driver.By.css('div#cancel_order_popup'), timeout)
        .then(dialog => {
          return dialog.findElement($driver.By.css('.orderCancelBtn3')).click();
        })
      );
  }, (err) => {
    console.log('Cancel Order Failed');
    throw err;
  })

  .catch(err => {
    console.log('ERROR: ' + err.message);
    console.log(err.stack);
    throw err;
  });

function waitForOverlay() {
  return $browser.waitForAndFindElement($driver.By.css('div#overlay-loader'))
    .then((element) => {
      console.log('Waiting for Loading Overlay to Disappear');
      return $browser.wait(() => element.getCssValue('display') === 'none', timeout)
    })
    .catch((error) => {});
}

function waitForUrl(url) {
  console.log('Waiting for URL: ' + url);
  return $browser.wait(() => {
    return $browser.getCurrentUrl()
      .then((location) => location && location.toLowerCase().startsWith(url.toLowerCase()));
  });
}
